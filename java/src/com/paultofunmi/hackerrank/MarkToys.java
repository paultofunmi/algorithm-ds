package com.paultofunmi.hackerrank;

/**
 * Copyright Â© 2021, Jumia.
 *
 * Mark and Jane are very happy after having their first child. Their son loves toys, so Mark wants to buy some.
 * There are a number of different toys lying in front of him, tagged with their prices. Mark has only a certain amount to spend,
 * and he wants to maximize the number of toys he buys with this money. Given a list of toy prices and an amount to spend, determine
 * the maximum number of gifts he can buy
 */
public class MarkToys {

	static int maximumToys(int[] prices, int k) {


		if(prices.length == 0 || prices == null || k == 0) return 0;

		int max = 0;

		for(int i = 0; i < prices.length; i++){

			int newCount = 0;
			int newMax = 0;

			for(int j = i; j < prices.length; j++ ){

				if(prices[j] > k) continue;

				if(prices[j] + newCount <= k){
					newCount += prices[j];
					newMax++;
				}

				if(newMax > max) max = newMax;
			}
		}

		return max;
	}


	public static void main(String[] args) {

//		System.out.println(MarkToys.maximumToys(new int[]{3,7,2,9,4}, 15));
//		System.out.println(MarkToys.maximumToys(new int[]{1,2,3,4}, 7));
//		System.out.println(MarkToys.maximumToys(new int[]{1, 12,  5,  111,  200,  1000,  10}, 50));
		System.out.println(MarkToys.maximumToys(
				new int[]{81001527, 22342382, 80577230, 56973298, 12092409, 81133791, 15929243, 93778436, 76524713, 47787214, 19191951, 53122728, 41368425, 69935330, 59494626, 71034263,
						66885813, 45651186, 26183666, 27401979, 31676479, 57335909, 86866218, 96727360, 12537527, 40996191, 99789314, 86934306, 95534407, 88977129, 81294789, 29052286,
						63835863, 61872019, 86025584, 75928273, 95522163, 1954828, 69706709, 24563228, 49742042, 41415012, 77685956, 43626820, 11350342, 89696935, 14661083, 30752508,
						35348121, 93361101, 58154487, 19540953, 3213362, 97537057, 16268313, 15750890, 91049601, 68573979, 2685196, 39100360, 57551109, 36496337, 68152646, 73903324,
						98368357, 6694583, 49831597, 46406872, 8649411, 72054658, 70970100, 10907805, 65986023, 48656057, 54534625, 29852717, 90869344, 21712060, 60605225, 26217465,
						15073161, 71276064, 45758418, 18286524, 21329474, 14543084, 34037414, 12379075, 83117063, 36722610, 51479435, 93184524, 73218947, 72148433, 67087849, 24103656,
						78843016, 69435798, 70510528, 87492427, 41490457, 93996981, 50916585, 7476480, 95169390, 5451210, 37329197, 86038734, 27163271, 50450775, 12256199, 94752784, 21726839,
						10530970, 13039308, 95572665, 25074054, 99593074, 7951740, 8191117, 88832036, 11947527, 53891994, 14567336, 84095961, 20979843, 38670992, 62938977, 90415641, 61697873,
						50431405, 31906098, 55694854, 1347990, 91898930, 3380596, 59315552, 81744480, 89419330, 38995175, 32195255, 54191881, 33747960, 6438446, 17239203, 99303620, 2011112,
						42313257, 98896695, 62479204, 3020727, 87728731, 74426732, 56912721, 54812419, 58522693, 30408916, 93483412, 21461670, 20824557, 7697637, 24409427, 5247008, 15908843,
						78273769, 49662290, 19289439, 90105674, 31406770, 8708769, 29100849, 16118377, 15417002, 15365161, 22556824, 32656206, 14668782, 77084288, 27485815, 66081829, 92079844,
						83022894, 6326912, 66506576, 39935615, 61139332, 77545621, 22860883, 7139096, 51523644, 43685441, 14836733, 75933071, 1448801, 30745576, 6723193, 51111091, 2551367,
						96828867, 862}, 80000000));  //18
	}
}


//[6, 8, 5]
//[2, 2, 3, 3, 4, 4, 5, 6, 8]
// sort array. put first d elements in array.  //count from i =0 to i < d
//[2, 2, 3, 3, 4]  //count i = d; i < n

//[2, 3, 4, 2, 3, 6, 8, 4, 5]
//[2, 3, 4, 2, 3]
//[2, 2, 3, 3, 4]